import streamlit as st
import os
from crewai import Agent, Crew, Task, LLM
from langchain_groq import ChatGroq
from crewai_tools import FileReadTool
from tools.video_tools import VideoTools


def save_uploaded_file(uploaded_file, save_dir):
    """Save uploaded file to a temporary directory"""
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)
    file_path = os.path.join(save_dir, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    return file_path


def initialize_crew():
    """Initialize the crew with exactly the same configuration"""
    file_read_tool = FileReadTool()

    GROQ_API_KEY = os.getenv("GROQ_API_KEY")

    llm = LLM(
        model="llama-3.1-70b-versatile",
        api_key=GROQ_API_KEY,
        base_url="https://api.groq.com/openai/v1"
    )

    # Agents with exact same configurations
    movie_director = Agent(
        role='Movie Director',
        goal='Create Trailer Sequences for different audience segments.',
        backstory='You are an experienced Movie Director who has a deep understanding of'
        'filmaking and movie direction. You also understand different audience segments'
        'for a movie and are talented in creating engaging movie trailers for different'
        'audience segments.',
        tools=[file_read_tool],
        llm=llm)

    junior_editor = Agent(
        role='Junior Video Editor',
        goal='Trim clips from main video for different movie trailers.',
        backstory='You are an experienced video editor who has worked on several'
        'worked on several editing projects movies and movie trailers.'
        'You are adept at using video editing and trimming tools.',
        tools=[VideoTools.trim_video_clip],
        llm=llm)

    senior_editor = Agent(
        role='Senior Video Editor',
        goal='Combine the clips for appropriate trailer sequences.',
        backstory='You are an experienced Senior Video Editor who has worked on'
        'several editing projects, movies and movie trailers. You have a deep'
        'understanding of video and cinematic composition. You are adept at using'
        'video editing and merging tools.',
        tools=[VideoTools.merge_video_clips],
        llm=llm)

    # Tasks with exact same descriptions
    sequence_generation = Task(
        description='1. Read and analyse the transcript for the movie: {movie_name}, of genre: {genre}'
        'at file path {file_path}.'
        '2. Based on the analysis of the transcript and the movie, identify different audience'
                    'segments for the movie and then provide the sequence of shots with the timestamps for'
                    'a trailer for each audience segement. For example, a young audience which enjoys action'
                    'would want to see the parts of the movie with action emphasised in the trailer and so on.'
                    '3. The sequence for each audience segment should include the accurate parts of the transcript'
                    'and timestamps of the clips that need to be included in the trailer for that audience segment.'
                    '4. For the clips in each sequence also provide the start and end timestamps of the clip and'
                    'give the timestamps in ONLY seconds, FOR INSTANCE instead of 00:01-02:00 (2 mins) give 01-120 (seconds).',
        agent=movie_director,
        expected_output='Sequences for multiple trailers for different audience segments with timestamps and'
        'transcript.',
        output_file='trailer_sequences.md'
    )

    video_trimming = Task(
        description='1. Based on the different sequences generated by the Movie Director Agent'
        'trim clips from the main short film for different movie trailers based on'
        'the given timestamps. The video file path for the main movie video is {video_path}.'
                    '2. Here is an EXAMPLE for the arguements to be passed for the trim_video_clip tool'
                    'example: " VideoTools.trim_video_clip("input_video.mp4", 10.5, 25.75, "output_video.mp4") " '
                    'Ensure that the timestamps are input correctly and the duration is suitable and not too long.',
        agent=junior_editor,
        expected_output='Trimmed clips for movie trailer.',
        context=[sequence_generation]
    )

    video_merging = Task(
        description='1. Based on the sequences generated by the Movie Director agent and the clips'
                    'made by the Junior Video Editor agent you have to combine the clips for respective'
                    'sequences and make trailers for the identified audience segements.'
                    '2. Use the merge_video_clip tool to merge the appropriate clips to make the trailer'
                    'for the identified segments.'
                    'Here\'s an EXAMPLE usage of passing the arguements for the tool: '
                    'VideoTools.merge_video_clips(clip_paths=["clip1.mp4", "clip2.mp4", "clip3.mp4"], output_path="final_trailer.mp4")',
        agent=senior_editor,
        expected_output='Multiple movie trailers made by merging the clips for identified sequences.',
        context=[sequence_generation, video_trimming]
    )

    # Create crew
    trailer_crew = Crew(
        agents=[movie_director, junior_editor, senior_editor],
        tasks=[sequence_generation, video_trimming, video_merging],
        verbose=True
    )

    return trailer_crew


def main():
    st.set_page_config(page_title="Movie Trailer Generator", layout="wide")

    st.title("üé¨ AI Movie Trailer Generator")
    st.write(
        "Generate tailored movie trailers for different audience segments using AI agents.")

    # Initialize session state
    if 'processing' not in st.session_state:
        st.session_state.processing = False
    if 'trailer_sequences' not in st.session_state:
        st.session_state.trailer_sequences = None
    if 'final_trailers' not in st.session_state:
        st.session_state.final_trailers = []

    # Create output directory if it doesn't exist
    output_dir = "generated_trailers"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Input section
    with st.form("input_form"):
        col1, col2 = st.columns(2)

        with col1:
            transcript_file = st.file_uploader(
                "Upload Movie Transcript (TXT)", type=['txt'])
            movie_name = st.text_input("Movie Name")

        with col2:
            video_file = st.file_uploader(
                "Upload Movie File (MP4)", type=['mp4'])
            genre = st.text_input("Movie Genre")

        submit_button = st.form_submit_button("Generate Trailers")

    if submit_button and not st.session_state.processing:
        if not all([transcript_file, video_file, movie_name, genre]):
            st.error("Please provide all required inputs!")
            return

        if not os.getenv("GROQ_API_KEY"):
            st.error("GROQ API Key not found in environment variables!")
            return

        st.session_state.processing = True

        try:
            # Save uploaded files
            temp_dir = "temp_uploads"
            transcript_path = save_uploaded_file(transcript_file, temp_dir)
            video_path = save_uploaded_file(video_file, temp_dir)

            # Initialize and run crew
            trailer_crew = initialize_crew()

            with st.spinner("Generating trailers... This might take a while"):
                result = trailer_crew.kickoff(inputs={
                    'file_path': transcript_path,
                    'movie_name': movie_name,
                    'genre': genre,
                    'video_path': video_path
                })

                # Store sequences
                if os.path.exists('trailer_sequences.md'):
                    with open('trailer_sequences.md', 'r') as f:
                        st.session_state.trailer_sequences = f.read()

                # Update final trailers list
                st.session_state.final_trailers = [
                    f for f in os.listdir(output_dir)
                    if f.endswith('.mp4') and f.startswith(f"{movie_name.lower().replace(' ', '_')}")
                ]

            st.success("Trailer generation complete!")

        except Exception as e:
            st.error(f"An error occurred: {str(e)}")
        finally:
            st.session_state.processing = False

    # Display results
    if st.session_state.trailer_sequences:
        st.header("üìù Generated Trailer Sequences")
        st.markdown(st.session_state.trailer_sequences)

    if st.session_state.final_trailers:
        st.header("üé• Generated Trailers")
        for trailer_file in st.session_state.final_trailers:
            trailer_path = os.path.join(output_dir, trailer_file)
            try:
                st.subheader(f"Trailer: {trailer_file}")
                with open(trailer_path, 'rb') as video_file:
                    video_bytes = video_file.read()
                    st.video(video_bytes)
            except Exception as e:
                st.error(f"Error loading trailer {trailer_file}: {str(e)}")

    # Cleanup button
    if st.sidebar.button("Clear All"):
        # Clear temporary uploads
        if os.path.exists("temp_uploads"):
            for file in os.listdir("temp_uploads"):
                os.remove(os.path.join("temp_uploads", file))
            os.rmdir("temp_uploads")

        # Clear generated trailers
        if os.path.exists(output_dir):
            for file in os.listdir(output_dir):
                os.remove(os.path.join(output_dir, file))

        # Clear session state
        st.session_state.processing = False
        st.session_state.trailer_sequences = None
        st.session_state.final_trailers = []
        st.success("All data cleared!")


if __name__ == "__main__":
    main()
