import os
from crewai import Agent, Crew, Process, Task, LLM
from langchain_groq import ChatGroq
from crewai_tools import FileReadTool
from tools.video_tools import VideoTools

file_read_tool = FileReadTool()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")

llm = LLM(

    model="llama-3.2-90b-text-preview",

    api_key=GROQ_API_KEY,

    base_url="https://api.groq.com/openai/v1"

)

# Agents
movie_director = Agent(
    role='Movie Director',
    goal='Create Trailer Sequences for different audience segments.',
    backstory='You are an experienced Movie Director who has a deep understanding of'
    'filmaking and movie direction. You also understand different audience segments'
    'for a movie and are talented in creating engaging movie trailers for different'
    'audience segments.',
    tools=[file_read_tool],
    llm=llm)

editor = Agent(
    role='Video Editor',
    goal='Trim clips from main video for different movie trailers.',
    backstory='You are an experienced video editor who has worked on several'
              'worked on several editing projects movies and movie trailers.'
              'You are adept at using video editing and trimming tools.',
    tools=[VideoTools.trim_video_clip],
    llm=llm)

# Tasks
sequence_generation = Task(
    description='1. Read and analyse the transcript for the movie: {movie_name}, of genre: {genre}'
                'at file path {file_path}.'
                '2. Based on the analysis of the transcript and the movie, identify different audience'
                'segments for the movie and then provide the sequence of shots with the timestamps for'
                'a trailer for each audience segement. For example, a young audience which enjoys action'
                'would want to see the parts of the movie with action emphasised in the trailer and so on.'
                '3. The sequence for each audience segment should include the accurate parts of the transcript'
                'and timestamps of the clips that need to be included in the trailer for that audience segment.',
    agent=movie_director,
    expected_output='Sequences for multiple trailers for different audience segments with timestamps and'
    'transcript.',
    output_file='trailer_sequences.md'
)

video_trimming = Task(
    description='1. Based on the different sequences generated by the Movie Director Agent'
                'trim clips from the main short film for different movie trailers based on'
                'the given timestamps. The video file path for the main movie video is {video_path}.'
                '2. Here is an EXAMPLE for the arguements to be passed for the trim_video_clip tool'
                'example: " VideoTools.trim_video_clip("input_video.mp4", 10.5, 25.75, "output_video.mp4") " ',
    agent=editor,
    expected_output='Trimmed clips for movie trailer.',
    context=[sequence_generation]
)

# Crew Assembly
trailer_crew = Crew(
    agents=[movie_director, editor],
    tasks=[sequence_generation, video_trimming],
    verbose=True
)

file_path = 'F:\\Mumbai Hacks\\app\\transcript.txt'
movie_name = 'Outer Reached'
genre = 'Sci-fi'
video_path = 'F:\\Mumbai Hacks\\app\\movie.mp4'

result = trailer_crew.kickoff(inputs={
    'file_path': file_path,
    'movie_name': movie_name,
    'genre': genre,
    'video_path': video_path
})

print(result)
